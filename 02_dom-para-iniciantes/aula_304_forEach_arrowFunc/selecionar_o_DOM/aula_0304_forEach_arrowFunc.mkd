# forEach: 
Constantemente vamos selecionar uma lista de itens do dom. A melhor forma para interagirmos com os mesmos é utilizando o método forEach.

const imgs = document.querySelectorAll('img')
imgs.forEach(function (item) {
  console.log(item)
})

# Parâmetros do forEach: 

o primeiro parâmetro é o callback, ou seja, a função que será ativada a cada item. Essa função pode receber três parâmetros: ValorAtual, index e array:

const imgs2 = document.querySelectorAll(ímg)
img2.forEach(function (valorAtual, index, array) {
  console.log(valorAtual) // o item atual no loop
  console.log(index) // o item atual no loop
  console.log(array) // o item atual no loop
})

const imgs3 = document.querySelectorAll('img')

let i = 0
imgs3.forEach(function () {
  console.log(i++)
})

# forEach e Array: 
forEach é um método de Array, alguns objetos array-like possuem este método. Caso não possua, o ideal é transform-alos em uma array:

const titulos = document.getElementsByClassName('titulo')
const titulosArray = Array.from(titulos)

console.log(titulos)
console.log(titulosArray)

titulosArray.forEach(function (item) {
  console.log(item)
})

# Arrow Function: 
Sintaxe curta em relação a function expression. Basta remover a palavra chave function e adicionar a fat arrow => após os argumentos:

# Não precisa de parenteses no argumento, por ser só um:
imgs4.forEach(item => {
  console.log(item)
})

# múltiplos argumentos precisam de parenteses
const imgs4 = document.querySelectorAll('img')
imgs4.forEach((item, index) => {
  console.log(item)
  console.log(index)
  console.log(item, index)
})

# sem argumentos precisa dos parênteses, mesmo vazio:
let h = 0
imgs4.forEach(() => {
  console.log(h++)
})

# versão curta de uma função:
imgs4.forEach(() => console.log(h++))
